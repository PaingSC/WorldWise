I. Using React Router
    1. Usage
        1)  import { BrowserRouter, Routes, Route } from "react-router-dom" in root component.

        2)  Implement "Routes" and main pages in root component
            <BrowserRouter>
                <Routers>
                    <Route path="/" element={<Homepage />} />
                    <Route path="path-name1" element={<Component1 />} />
                    <Route path="path-name2" element={<Component2 />} /> 
                    <Route path="path-name3" element={<Component3 />} />
                    <Route path="*" element={<PageNotFound />} />
                </Routers>
            </BrowserRouter>
            (Note: Don't forget to import Components(main pages))

        3)  Link between Routes with Link and NavLink
            a)  Import "Link" or NavLink from "react-router-dom" 
                <Link to="/">Homepage</Link>
                <Link to="/path-name1">Component1</Link>
                <Link to="/path-name2">Component2</Link>
                <Link to="/path-name3">Component3</Link>

                (OR)

                <NavLink to="/">Homepage</NavLink>
                <NavLink to="/path-name1">Component1</NavLink>
                <NavLink to="/path-name2">Component2</NavLink>
                <NavLink to="/path-name3">Component3</NavLink>

        4)  Index Route
                a)  Insert "index" in the "Route" component and.
                b)  set the "TargetComponent" to the element.
                <BrowserRouter>
                    <Routes>
                        <Route index element={<TergetComponent />} />
                    </Routes>
                </BrowserRouter>

        5)  Nested Routes
                a)  Insert nested "Routes" in the opening and closing tag of "parent Route"
                b)  set the "TargetComponent" in element
                c)  Use "<Outlet />" component to somewhere insind the "parent component" or
                    the "child components"
                <Route path="app" element={<AppLayout />}>
                    <Route index element={<p>LIST</p>} />
                    <Route path="cities" element={<p>List of cities</p>} />
                    <Route path="countries" element={<p>Countires</p>} />
                    <Route path="form" element={<p>Form</p>} />
                </Route>

        6)  Storing State in the URL
            a)  Advantages
                1)  Easy way to store "state" in global place, accessible to all components in the app
                2)  Good way to pass data from one page to the next page
                3)  Makes it possible to bookmark and share the page with the exact same UI it had at the time

            b)  Form
                www.example.com/app/cities/lisbon?lat=38.728&&lng=-9.141
                www.example.com = "root URL"
                /app/cities = "path" (Correspond to the component that is currently being displayed)
                lisbon = "params" (parameters: very useful to pass data to the next page)
                lat=38.728&&lng=-9.141 = "query string" (useful to store some global state that should be accessible every where)

                a)) Storing "state"(data) in URL with "Params"
                    Three steps of using Params
                    Step-1) Create a new "Route"
                        <Route path="cities/:city" element={<City />} />
                        city = "params"
                    Step-2) Link to that "Route"
                        <Link to={`${city}`} >Barnyar Barnyar</Link>
                        Returning an anchor tag!
                    Step-2) Read the "state"(data) from the URL in that "Route"
                        Use "useParams" hook to get the from the "Route"
                        Eg., const x = useParams();
                        useParams returns an object with the name of the "params" as "key" and {`${city}`} as "value" 

                b)) Storing "state"(data) in the URL with "Query string"
                        Eg., <Link to={`${id}?lat=${position.lat}&lng=${position.lng}`} >Barnyar Barnyar</Link>

                        Use "useSearchParams()" to read "state"(data)
                        "useSearchParams" is the custom hook supported by "react router"

                        Then, for getting the lat and lng values,
                            const lat = searchParams.get("lat");
                            const lng = searchParams.get("lng");

                        For the setter function of useSearchParams hook,
                        Pass an object for the key and value for each of the individual param
                            setSearchParams({lat: 23, lng: 87})

                c)) Programatic Navigation (useNavigate: a custom Hook)
                        Programatic Navigation basically means to move to a new URL without the 
                    user having to click on any link. A common use case of this behavior is right
                    after summiting a form.

                d)) the "type" prop

